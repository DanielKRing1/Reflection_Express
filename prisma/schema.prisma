// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model User {
  password_userId             Password?           @relation(name: "password_userId")
  journal_userId              Journal[]           @relation(name: "journal_userId")
  email                       String              @id @unique

  // Set to null when delete Journal + Update id if Journal id updated
  user_lastUsedJournalId      Journal?            @relation(name: "user_lastUsedJournalId", fields: [lastUsedJId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lastUsedJId                 BigInt?             @unique
}

model Password {
  // Cascade delete/update with User
  password_userId             User                @relation(name: "password_userId", fields: [userId], references: [email], onDelete: Cascade, onUpdate: Cascade)
  userId                      String              @id

  hash                        String
}

model Journal {
  user_lastUsedJournalId      User?               @relation(name: "user_lastUsedJournalId")
  inkling_journalId           Inkling[]           @relation(name: "inkling_journalId")
  journalentry_journalId      JournalEntry[]      @relation(name: "journalentry_journalId")
  thought_journalId           Thought[]           @relation(name: "thought_journalId")
  reflection_journalId        Reflection[]        @relation(name: "reflection_journalId")
  id                          BigInt              @id @default(autoincrement())
  
  // Cascade delete/update with User
  journal_userId              User                @relation(name: "journal_userId", fields: [userId], references: [email], onDelete: Cascade, onUpdate: Cascade)
  userId                      String

  @@index([userId])
}

model Inkling {
  timeId                      DateTime            @db.Timestamptz(3)

  // Cascade delete/update with Journal
  inkling_journalId           Journal             @relation(name: "inkling_journalId", fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalId                   BigInt

  text                        String

  @@id([journalId, timeId])
}

model JournalEntry {
  reflection_journalEntryId   Reflection[]        @relation(name: "reflection_journalEntryId")
  timeId                      DateTime            @db.Timestamptz(3)

  // Cascade delete/update with Journal
  journalentry_journalId      Journal             @relation(name: "journalentry_journalId", fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalId                   BigInt

  @@id([journalId, timeId])
}

model Thought {
  reflection_thoughtId        Reflection[]        @relation(name: "reflection_thoughtId")
  timeId                      DateTime            @db.Timestamptz(3)

  // Cascade delete/update with Journal
  thought_journalId           Journal             @relation(name: "thought_journalId", fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalId                   BigInt

  text                        String

  @@id([journalId, timeId])
}

model Reflection {
  // Cascade delete/update with Journal
  reflection_journalId        Journal             @relation(name: "reflection_journalId", fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  journalId                   BigInt

  // Cascade delete/update with JournalEntry
  reflection_journalEntryId   JournalEntry        @relation(name: "reflection_journalEntryId", fields: [journalId, journalEntryId], references: [journalId, timeId], onDelete: Cascade, onUpdate: Cascade)
  journalEntryId              DateTime            @db.Timestamptz(3)

  // Cascade delete/update with Thought
  reflection_thoughtId        Thought             @relation(name: "reflection_thoughtId", fields: [journalId, thoughtId], references: [journalId, timeId], onDelete: Cascade, onUpdate: Cascade)
  thoughtId                   DateTime            @db.Timestamptz(3)

  decision                    Int                 @db.SmallInt

  @@id([journalEntryId, thoughtId])
}
